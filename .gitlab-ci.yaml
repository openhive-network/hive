stages:
- static_code_analysis
- build
- test
- cleanup
- publish
- deploy

variables:
  PYTEST_NUMBER_OF_PROCESSES: 8
  GIT_DEPTH: 20
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  CI_DEBUG_SERVICES: "true"
  # pin to specific docker images for build repeatability
  # uses registry.gitlab.syncad.com/hive/hive/ci-base-image:ubuntu22.04-10
  TEST_IMAGE_TAG: "@sha256:080b16fd53013aeb9b89b00a8dfc90fecf886173f46448b05f45cee376c43330"

  # Versions of Python packages
  PYTHON_JUNIT_XML_VERSION: "1.9"
  PYTHON_DATEUTIL_VERSION: "2.8.2"

  TOX_VERSION: "3.25.1"

  DATA_CACHE_HIVE_PREFIX: "/cache/replay_data_hive"
  BLOCK_LOG_SOURCE_DIR_5M: /blockchain/block_log_5m
  BLOCK_LOG_SOURCE_DIR_MIRRORNET_5M: /blockchain/block_log_5m_mirrornet

  # Variables required by the mirrornet pipeline
  MIRRORNET_CHAIN_ID: 42
  MIRRORNET_SKELETON_KEY: "5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n"
  TEST_TOOLS_VALIDATE_RESPONSE_SCHEMAS: "TRUE"

  NPM_TOKEN: $CI_JOB_TOKEN

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - local: '/scripts/ci-helpers/prepare_data_image_job.yml'
  - local: '/scripts/ci-helpers/mirrornet_jobs.gitlab-ci.yml'
  - project: 'hive/common-ci-configuration'
    ref: 18b2a600936c6f7945d6f1131f606c7083a515ff
    file:
    - '/templates/wasm_build.gitlab-ci.yml'
    - '/templates/python_projects.gitlab-ci.yml'

.wasm_beekeeper_test_base:
  stage: test
  # emscripten image can be used as it contains all needed tools (node and npm).
  image: ${EMSCRIPTEN_IMAGE}
  variables:
    FF_NETWORK_PER_BUILD: 1

  before_script:
    - cd programs/beekeeper/beekeeper_wasm
    - pnpm install

  tags:
    - public-runner-docker

testnet_node_build:
  extends: .prepare_hived_image
  stage: build

  variables:
    REGISTRY_USER: "$HIVED_CI_IMGBUILDER_USER"
    REGISTRY_PASS: $HIVED_CI_IMGBUILDER_PASSWORD
    BINARY_CACHE_PATH: "$CI_PROJECT_DIR/hived-testnet-binaries"
    HIVE_NETWORK_TYPE: testnet
  artifacts:
    paths:
      - "$BINARY_CACHE_PATH"
  tags:
    - public-runner-docker
    - hived-for-tests

.unit_tests_base:
  extends: .job-defaults
  stage: test
  needs:
    - job: testnet_node_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  variables:
    GIT_STRATEGY: none
    FF_NETWORK_PER_BUILD: "true"
  tags:
    - public-runner-docker

.hived-service: &hived-service
  - name: $HIVED_IMAGE_NAME
    alias: hived-instance
    variables:
      DATA_SOURCE: "${DATA_CACHE_HIVE_PREFIX}_${HIVED_COMMIT}"
      LOG_FILE: $CI_JOB_NAME.log
    command: ["--replay-blockchain", "--stop-replay-at-block=5000000"]

.run-pytest: &run-pytest
  # Usage:
  # 1. Add - *run-pytest to your script section.
  # 2. Set the appropriate values for:
  #    - PYTEST_TIMEOUT_MINUTES (required)
  #    - PYTEST_NUMBER_OF_PROCESSES (default: defined via global CI variable)
  #    - PYTEST_LOG_DURATIONS (default: 0 - disabled)
  #    - PYTEST_ARGS (default: "" - empty)
  #      Best to export PYTEST_ARGS as array (e.g. `export PYTEST_ARGS=(-m testnet)`. In some cases setting PYTEST_ARGS as string will fail.
  - if [ -z "$PYTEST_TIMEOUT_MINUTES" ]; then echo "Required variable PYTEST_TIMEOUT_MINUTES was not set!"; exit 22; fi
  - if [ $PYTEST_NUMBER_OF_PROCESSES -gt 1 ]; then PROCESSES="-n ${PYTEST_NUMBER_OF_PROCESSES}";  fi
  - if [ ${PYTEST_LOG_DURATIONS:=0} -ge 1 ]; then DURATIONS="--durations 0";  fi
  - |
    echo "Launching pytest
     - timeout (minutes): ${PYTEST_TIMEOUT_MINUTES}
     - processes: ${PYTEST_NUMBER_OF_PROCESSES}
     - log durations: ${PYTEST_LOG_DURATIONS}
     - additional arguments: ${PYTEST_ARGS[@]}"
  - timeout $((($PYTEST_TIMEOUT_MINUTES + 2) * 60)) pytest --timeout=$(($PYTEST_TIMEOUT_MINUTES * 60)) --junitxml="$JUNIT_REPORT" "${PROCESSES}" "${DURATIONS}" "${PYTEST_ARGS[@]}"

.python_based:
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  extends:
    - .project_develop_configuration_template
  before_script:
    - cd $CI_PROJECT_DIR/tests/python/hive-local-tools
    - !reference [.project_develop_configuration_template, before_script]
    - cd $CI_PROJECT_DIR

verify_poetry_lock_sanity:
  extends: .verify_poetry_lock_sanity_template
  stage: static_code_analysis
  variables:
    PYPROJECT_DIR: "$CI_PROJECT_DIR/tests/python/hive-local-tools"
  tags:
    - public-runner-docker

.python_static_analysis_configuration:
  extends: .python_based
  needs: []  # to run immediately without waiting for previous jobs
  variables:
    PACKAGES_TO_CHECK: "$CI_PROJECT_DIR/tests/python/"
    PYPROJECT_CONFIG_PATH: "$CI_PROJECT_DIR/tests/python/hive-local-tools/pyproject.toml"
  before_script:
    - !reference [.python_based, before_script]
    - cd $CI_PROJECT_DIR/tests/python/hive-local-tools
  tags:
    - public-runner-docker

pre_commit_checks:
  stage: static_code_analysis
  extends:
    - .pre_commit_checks_template
    - .python_static_analysis_configuration
  artifacts:
    paths:
      - tests/python/hive-local-tools/poetry.lock

lint_code_with_ruff:
  stage: static_code_analysis
  extends:
    - .lint_code_with_ruff_template
    - .python_static_analysis_configuration

formatting_with_black_check:
  stage: static_code_analysis
  extends:
    - .formatting_with_black_check_template
    - .python_static_analysis_configuration

.pytest_based:
  extends: .python_based
  variables:
    JUNIT_REPORT: "report.xml" # should be overriden by derived jobs
  after_script:
    - |
      shopt -s globstar
      tar --exclude='**/generated_during_*/**/block_log' --exclude='**/generated_during_*/**/block_log.artifacts' --exclude='**/generated_during_*/**/shared_memory.bin' --exclude='**/generated_during_*/**/*.sst' -cf - **/generated_during_* | 7z a -si generated_during.tar.7z
      tar -cf - **/generated_by_package_fixtures | 7z a -si generated_by_package_fixtures.tar.7z
  artifacts:
    reports:
      junit: $JUNIT_REPORT
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - "generated_during.tar.7z"
      - "generated_by_package_fixtures.tar.7z"
    when: always
    expire_in: 1 week

.test_tools_based:
  extends: .pytest_based
  variables:
    HIVED_PATH: "$CI_PROJECT_DIR/hived-testnet-binaries/hived"
    CLI_WALLET_PATH: "$CI_PROJECT_DIR/hived-testnet-binaries/cli_wallet"
    GET_DEV_KEY_PATH: "$CI_PROJECT_DIR/hived-testnet-binaries/get_dev_key"
    BLOCK_LOG_UTIL_PATH: "$CI_PROJECT_DIR/hived-testnet-binaries/block_log_util"
    TEST_TOOLS_NODE_DEFAULT_WAIT_FOR_LIVE_TIMEOUT: "60"
  needs:
    - job: testnet_node_build
      artifacts: true

cli_wallet_tests:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker

cli_wallet_tests_2:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker


cli_wallet_tests_3:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker


cli_wallet_tests_4:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker

cli_wallet_tests_5:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker


cli_wallet_tests_6:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker

cli_wallet_tests_7:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker


cli_wallet_tests_8:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker


cli_wallet_tests_9:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker


cli_wallet_tests_10:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: $CI_PROJECT_DIR/tests/python/functional/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/python/functional/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker

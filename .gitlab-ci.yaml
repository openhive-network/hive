stages:
- build
- static_code_analysis
- test
- cleanup
- publish
- deploy

variables:
  PYTEST_NUMBER_OF_PROCESSES: 8
  GIT_DEPTH: 20
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  CI_DEBUG_SERVICES: "true"
  # pin to specific docker images for build repeatability
  # uses registry.gitlab.syncad.com/hive/hive/ci-base-image:ubuntu22.04-7
  TEST_IMAGE_TAG: "@sha256:8f68baf07c6e581e1e8034a1447c4ff1268239fc886bfe4b02aa3f4182bf78bb"

  # Versions of Python packages
  PYTHON_JUNIT_XML_VERSION: "1.9"
  PYTHON_DATEUTIL_VERSION: "2.8.2"

  TOX_VERSION: "3.25.1"

  DATA_CACHE_HIVE_PREFIX: "/cache/replay_data_hive"
  BLOCK_LOG_SOURCE_DIR_5M: /blockchain/block_log_5m
  BLOCK_LOG_SOURCE_DIR_MIRRORNET_5M: /blockchain/block_log_5m_mirrornet

  # Variables required by the mirrornet pipeline
  MIRRORNET_CHAIN_ID: 42
  MIRRORNET_SKELETON_KEY: "5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n"
  TEST_TOOLS_VALIDATE_RESPONSE_SCHEMAS: "TRUE"

  NPM_TOKEN: $CI_JOB_TOKEN

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - local: '/scripts/ci-helpers/prepare_data_image_job.yml'
  - local: '/scripts/ci-helpers/mirrornet_jobs.gitlab-ci.yml'
  - project: 'hive/common-ci-configuration'
    ref: ae2ec71af47184cdd9567ae85ff821d133c3343f
    file:
    - '/templates/wasm_build.gitlab-ci.yml'
    - '/templates/python_projects.gitlab-ci.yml'

.wasm_beekeeper_test_base:
  stage: test
  # emscripten image can be used as it contains all needed tools (node and npm).
  image: ${EMSCRIPTEN_IMAGE}
  variables:
    FF_NETWORK_PER_BUILD: 1

  before_script:
    - cd programs/beekeeper/beekeeper_wasm
    - pnpm install

  tags:
    - public-runner-docker

cleanup_hived_cache_manual:
  extends: .cleanup_cache_manual
  stage: cleanup
  variables:
    CLEANUP_PATH_PATTERN: "/cache/replay_data_hive_*"
  tags:
    - data-cache-storage


mirrornet_node_build:
  stage: build
  extends: .prepare_hived_image

  variables:
    REGISTRY_USER: "$HIVED_CI_IMGBUILDER_USER"
    REGISTRY_PASS: $HIVED_CI_IMGBUILDER_PASSWORD
    BINARY_CACHE_PATH: "hived-mirrornet-binaries"
    HIVE_NETWORK_TYPE: mirrornet
  after_script:
    - |
      source docker_image_name.env
      echo "Pushing hived image for commits on develop, master and tagged"
      docker images
      IMAGE_NAME_PREFIX="$CI_REGISTRY_IMAGE/mirrornet-instance:mirrornet-instance"
      if [[ "$CI_COMMIT_BRANCH" == "develop" ]];
      then
        docker tag $HIVED_IMAGE_NAME_INSTANCE $IMAGE_NAME_PREFIX-latest
        docker push $IMAGE_NAME_PREFIX-latest
      elif [[ "$CI_COMMIT_BRANCH" == "master" ]];
      then
        docker tag $HIVED_IMAGE_NAME_INSTANCE $IMAGE_NAME_PREFIX-stable
        docker push $IMAGE_NAME_PREFIX-stable
      elif [[ -n "$CI_COMMIT_TAG" ]];
      then
        docker tag $HIVED_IMAGE_NAME_INSTANCE $IMAGE_NAME_PREFIX-$CI_COMMIT_TAG
        docker push $IMAGE_NAME_PREFIX-$CI_COMMIT_TAG
      fi

  tags:
    - public-runner-docker
    - hived-for-tests

mirrornet_replay_test:
  extends: .job-defaults
  stage: test
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  needs:
    - job: "mirrornet_node_build"
      artifacts: true

  variables:
    BINARIES_DIR: "hived-mirrornet-binaries"
    BLOCK_LOG_SOURCE_DIR: "/blockchain"
    NUMBER_OF_BLOCKS: 5000000
    MIRRORNET_WORKING_DIR: "$CI_PROJECT_DIR/mirrornet"
    MIRRORNET_BLOCKCHAIN_DATA_DIR: "$MIRRORNET_WORKING_DIR/mirrornet_blockchain_data"
    MIRRORNET_SOURCE_5M_DATA_DIR: "$MIRRORNET_WORKING_DIR/source_5m"
    MAINNET_TRUNCATED_DIR: "$CI_PROJECT_DIR/mainnet"
    CONFIG_INI_SOURCE: "$CI_PROJECT_DIR/docker/config_mirrornet_5M.ini"
  before_script:
    - export NUMBER_OF_PROCESSES=8
    - mkdir -p "$MAINNET_TRUNCATED_DIR"
    - mkdir -p "$MIRRORNET_SOURCE_5M_DATA_DIR"
    - mkdir -p "$MIRRORNET_SOURCE_5M_DATA_DIR/blockchain"
    - mkdir -p "$MIRRORNET_BLOCKCHAIN_DATA_DIR"
    - mkdir -p "$MIRRORNET_BLOCKCHAIN_DATA_DIR/blockchain"
    - cp "$CI_PROJECT_DIR/docker/config_mirrornet_5M.ini" "$MIRRORNET_WORKING_DIR/config.ini"
    - cp "$BLOCK_LOG_SOURCE_DIR/block_log_5m/block_log" "$MIRRORNET_SOURCE_5M_DATA_DIR/blockchain"
    - cd "$BINARIES_DIR"
  script:
    - echo "Generating artifacts file for block_log."
    - time ./hived
      -d "$MIRRORNET_SOURCE_5M_DATA_DIR"
    - echo "Compressing block log to $NUMBER_OF_BLOCKS blocks with $NUMBER_OF_PROCESSES processes"
    - time ./compress_block_log
      -i "$MIRRORNET_SOURCE_5M_DATA_DIR/blockchain"
      -o "$MAINNET_TRUNCATED_DIR"
      --decompress
      -n $NUMBER_OF_BLOCKS
      --jobs $NUMBER_OF_PROCESSES
    - echo "Converting block log to mirrornet format with $NUMBER_OF_PROCESSES processes"
    - time ./blockchain_converter
      --plugin block_log_conversion
      -i "$MAINNET_TRUNCATED_DIR/block_log"
      -o "$MIRRORNET_BLOCKCHAIN_DATA_DIR/blockchain/block_log"
      --chain-id $MIRRORNET_CHAIN_ID
      --private-key "$MIRRORNET_SKELETON_KEY"
      --use-same-key
      --jobs $NUMBER_OF_PROCESSES
    - echo "Starting hived replay"
    - ./hived
      -d "$MIRRORNET_BLOCKCHAIN_DATA_DIR"
      --chain-id $MIRRORNET_CHAIN_ID
      --skeleton-key "$MIRRORNET_SKELETON_KEY"
      --set-benchmark-interval 100000
      --force-replay
      --validate-during-replay
      --stop-replay-at-block $NUMBER_OF_BLOCKS
      --exit-before-sync | tee hived-replay.log
  artifacts:
    paths:
      - "$BINARIES_DIR/*.log"
  tags:
    - public-runner-docker
    - hived-for-tests


.hived-service: &hived-service
  - name: $HIVED_IMAGE_NAME
    alias: hived-instance
    variables:
      DATA_SOURCE: "${DATA_CACHE_HIVE_PREFIX}_${HIVED_COMMIT}"
      LOG_FILE: $CI_JOB_NAME.log
    command: ["--replay-blockchain", "--stop-replay-at-block=5000000"]

.run-pytest: &run-pytest
  # Usage:
  # 1. Add - *run-pytest to your script section.
  # 2. Set the appropriate values for:
  #    - PYTEST_TIMEOUT_MINUTES (required)
  #    - PYTEST_NUMBER_OF_PROCESSES (default: defined via global CI variable)
  #    - PYTEST_LOG_DURATIONS (default: 0 - disabled)
  #    - PYTEST_ARGS (default: "" - empty)
  #      Best to export PYTEST_ARGS as array (e.g. `export PYTEST_ARGS=(-m testnet)`. In some cases setting PYTEST_ARGS as string will fail.
  - if [ -z "$PYTEST_TIMEOUT_MINUTES" ]; then echo "Required variable PYTEST_TIMEOUT_MINUTES was not set!"; exit 22; fi
  - if [ $PYTEST_NUMBER_OF_PROCESSES -gt 1 ]; then PROCESSES="-n ${PYTEST_NUMBER_OF_PROCESSES}";  fi
  - if [ ${PYTEST_LOG_DURATIONS:=0} -ge 1 ]; then DURATIONS="--durations 0";  fi
  - |
    echo "Launching pytest
     - timeout (minutes): ${PYTEST_TIMEOUT_MINUTES}
     - processes: ${PYTEST_NUMBER_OF_PROCESSES}
     - log durations: ${PYTEST_LOG_DURATIONS}
     - additional arguments: ${PYTEST_ARGS[@]}"
  - timeout $((($PYTEST_TIMEOUT_MINUTES + 2) * 60)) pytest --timeout=$(($PYTEST_TIMEOUT_MINUTES * 60)) --junitxml="$JUNIT_REPORT" "${PROCESSES}" "${DURATIONS}" "${PYTEST_ARGS[@]}"


Trigger-full-mirrornet-conversion:
  stage: deploy

  variables:
    MIRRORNET_IMAGE: "$HIVED_IMAGE_NAME"
    # This job will need just a Hive source code (access to some configuration files and scripts)
    GIT_STRATEGY: "clone"
    GIT_SUBMODULE_STRATEGY: "none"

  needs:
    - job: mirrornet_node_build
      artifacts: true

#  rules:
    # Create a child pipeline only when master/develop are a target branches. Child pipeline definition has defined manual job, so it will not start automatically.
#    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop")

  trigger:
    include:
      - local: scripts/ci-helpers/full-mirrornet-conversion.yml


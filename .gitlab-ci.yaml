stages:
- build
- replay
- test
- cleanup
- publish

variables:
  PYTEST_NUMBER_OF_PROCESSES: 8
  GIT_DEPTH: 20
  GIT_SUBMODULE_STRATEGY: recursive
  CI_DEBUG_SERVICES: "true"
  # pin to specific docker images for build repeatability
  # uses registry.gitlab.syncad.com/hive/hive/ci-base-image:ubuntu22.04-5
  TEST_IMAGE_TAG: "@sha256:eaa6f32730f0f4c45a95a65b6d790bea2b71a59276eb28795c04be7703f003e6"

  # Versions of Python packages
  PYTHON_JUNIT_XML_VERSION: "1.9"
  PYTHON_DATEUTIL_VERSION: "2.8.2"

  TOX_VERSION: "3.25.1"

  DATA_CACHE_HIVE_TEMPLATE: /cache/replay_data_hive
  DATA_CACHE_HIVE: "/cache/replay_data_hive_${CI_PIPELINE_ID}"
  BLOCK_LOG_SOURCE_DIR_5M: /blockchain/block_log_5m
  BLOCK_LOG_SOURCE_DIR_MIRRORNET_5M: /blockchain/block_log_5m_mirrornet

  # Variables required by the mirrornet pipeline
  MIRRORNET_CHAIN_ID: 42
  MIRRORNET_SKELETON_KEY: "5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n"
  RUN_MIRRORNET_PIPELINE: "false"

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - local: '/scripts/ci-helpers/prepare_data_image_job.yml'
  - local: '/scripts/ci-helpers/mirrornet_jobs.gitlab-ci.yml'

prepare_hived_image:
  extends: .prepare_hived_image
  stage: build
  variables:
    REGISTRY_USER: "$HIVED_CI_IMGBUILDER_USER"
    REGISTRY_PASS: $HIVED_CI_IMGBUILDER_PASSWORD
    BINARY_CACHE_PATH: "hived-binaries"
    HIVE_NETWORK_TYPE: mainnet
  tags:
    - public-runner-docker
    - hived-for-tests
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

prepare_hived_data:
  extends: .prepare_hived_data_5m
  needs:
    - job: prepare_hived_image
      artifacts: true
  stage: build
  variables:
    HIVE_NETWORK_TYPE: mainnet
    BLOCK_LOG_SOURCE_DIR: $BLOCK_LOG_SOURCE_DIR_5M
    CONFIG_INI_SOURCE: "$CI_PROJECT_DIR/docker/config_5M.ini"
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

cleanup_hived_cache_manual:
  extends: .cleanup_cache_manual
  stage: cleanup
  variables:
    CLEANUP_PATH_PATTERN: "/cache/replay_data_hive_*"
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

testnet_node_build:
  stage: build
  extends: .docker_image_builder_job

  variables:
    IMAGE_TAG: "$CI_COMMIT_SHA"
    SOURCES_DIR: "."
    REGISTRY_URL: "$CI_REGISTRY_IMAGE"
    BINARIES_DIR: "testnet_node_build/install-root/bin"
  script:
    - echo "Building hived in testnet mode"
    - mkdir -p testnet_node_build/install-root/bin
    - ./scripts/ci-helpers/build_instance.sh
      "$IMAGE_TAG"
      "$SOURCES_DIR"
      "$REGISTRY_URL"
      --network-type="testnet"
      --export-binaries="$BINARIES_DIR"
    - chmod -Rc a+rwx "$BINARIES_DIR"
  artifacts:
    paths:
      - "$BINARIES_DIR"
  tags:
    - public-runner-docker
    - hived-for-tests
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

mirrornet_node_build:
  stage: build
  extends: .docker_image_builder_job

  variables:
    IMAGE_TAG: "$CI_COMMIT_SHA"
    SOURCES_DIR: "."
    REGISTRY_URL: "$CI_REGISTRY_IMAGE"
    BINARIES_DIR: "hived-mirrornet-binaries"
  script:
    - |
      echo "Building hived in mirrornet mode"
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      ./scripts/ci-helpers/build_instance.sh \
        "$IMAGE_TAG" \
        "$SOURCES_DIR" \
        "$REGISTRY_URL" \
        --network-type="mirrornet" \
        --export-binaries="$BINARIES_DIR"
      docker images
      IMAGE_NAME_PREFIX="$CI_REGISTRY_IMAGE/mirrornet-instance:mirrornet-instance"
      docker push $IMAGE_NAME_PREFIX-$CI_COMMIT_SHA
      if [[ "$CI_COMMIT_BRANCH" == "develop" ]];
      then
        docker tag $IMAGE_NAME_PREFIX-$CI_COMMIT_SHA $IMAGE_NAME_PREFIX-latest
        docker push $IMAGE_NAME_PREFIX-latest
      elif [[ "$CI_COMMIT_BRANCH" == "master" ]];
      then
        docker tag $IMAGE_NAME_PREFIX-$CI_COMMIT_SHA $IMAGE_NAME_PREFIX-stable
        docker push $IMAGE_NAME_PREFIX-stable
      elif [[ -n "$CI_COMMIT_TAG" ]];
      then
        docker tag $IMAGE_NAME_PREFIX-$CI_COMMIT_SHA $IMAGE_NAME_PREFIX-$CI_COMMIT_TAG
        docker push $IMAGE_NAME_PREFIX-$CI_COMMIT_TAG
      fi
      chmod -Rc a+rwx "$BINARIES_DIR"
  artifacts:
    paths:
      - "$BINARIES_DIR"
  tags:
    - public-runner-docker
    - hived-for-tests

mirrornet_replay_test:
  stage: test
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  needs: 
    - job: "mirrornet_node_build"
      artifacts: true

  variables:
    BINARIES_DIR: "hived-mirrornet-binaries"
    BLOCK_LOG_SOURCE_DIR: "/blockchain"
    NUMBER_OF_BLOCKS: 5000000
    MIRRORNET_WORKING_DIR: "$CI_PROJECT_DIR/mirrornet"
    MAINNET_TRUNCATED_DIR: "$CI_PROJECT_DIR/mainnet"
    CONFIG_INI_SOURCE: "$CI_PROJECT_DIR/docker/config_mirrornet_5M.ini"
  interruptible: true
  before_script:
    - export NUMBER_OF_PROCESSES=8
    - mkdir -p "$MAINNET_TRUNCATED_DIR"
    - mkdir -p "$MIRRORNET_WORKING_DIR/blockchain/"
    - cp "$CI_PROJECT_DIR/docker/config_mirrornet_5M.ini" "$MIRRORNET_WORKING_DIR/config.ini"
    - cd "$BINARIES_DIR"
  script:
    - echo "Compressing block log to $NUMBER_OF_BLOCKS blocks with $NUMBER_OF_PROCESSES processes"
    - time ./compress_block_log
      -i "$BLOCK_LOG_SOURCE_DIR"
      -o "$MAINNET_TRUNCATED_DIR"
      --decompress
      -n $NUMBER_OF_BLOCKS
      --jobs $NUMBER_OF_PROCESSES
    - echo "Converting block log to mirrornet format with $NUMBER_OF_PROCESSES processes"
    - time ./blockchain_converter
      --plugin block_log_conversion
      -i "$MAINNET_TRUNCATED_DIR/block_log"
      -o "$MIRRORNET_WORKING_DIR/blockchain/block_log"
      --chain-id $MIRRORNET_CHAIN_ID
      --private-key "$MIRRORNET_SKELETON_KEY"
      --use-same-key
      --jobs $NUMBER_OF_PROCESSES
    - echo "Starting hived replay"
    - ./hived
      -d "$MIRRORNET_WORKING_DIR"
      --chain-id $MIRRORNET_CHAIN_ID
      --skeleton-key "$MIRRORNET_SKELETON_KEY"
      --set-benchmark-interval 100000
      --force-replay
      --validate-during-replay
      --stop-replay-at-block $NUMBER_OF_BLOCKS
      --exit-before-sync | tee hived-replay.log
  artifacts:
    paths:
      - "$BINARIES_DIR/*.log"
  tags:
    - public-runner-docker
    - hived-for-tests
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

chain_test:
  stage: test
  needs:
    - job: testnet_node_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  interruptible: true
  variables:
    GIT_STRATEGY: none
  script:
    - timeout 23m ./testnet_node_build/install-root/bin/chain_test --log_format=JUNIT --log_sink=chain_test_results.xml --log_level=error > chain_test.log 2>&1
  artifacts:
    reports:
      junit: chain_test_results.xml
    paths:
      - chain_test.log
    when: always
    expire_in: 1 week
  tags:
    - public-runner-docker
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

plugin_test:
  stage: test
  needs:
    - job: testnet_node_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  interruptible: true
  variables:
    GIT_STRATEGY: none
  script:
    # note: consider using --result_code=no to force exit code 0 even when tests fail because they currently fail and I want a nice green checkmark
    - timeout 6m ./testnet_node_build/install-root/bin/plugin_test --log_format=JUNIT --log_sink=plugin_test_results.xml --log_level=error > plugin_test.log 2>&1
  artifacts:
    reports:
      junit: plugin_test_results.xml
    paths:
      - plugin_test.log
    when: always
    expire_in: 1 week
  tags:
    - public-runner-docker
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

.hived-service: &hived-service
  - name: $HIVED_IMAGE_NAME
    alias: hived-instance
    variables:
      DATADIR: $DATA_CACHE_HIVE/datadir
      SHM_DIR: $DATA_CACHE_HIVE/shm_dir
      LOG_FILE: $CI_JOB_NAME.log
    command: ["--replay-blockchain", "--stop-replay-at-block=5000000"]

.run-pytest: &run-pytest
  # Usage:
  # 1. Add - *run-pytest to your script section.
  # 2. Set the appropriate values for:
  #    - PYTEST_TIMEOUT_MINUTES (required)
  #    - PYTEST_NUMBER_OF_PROCESSES (default: defined via global CI variable)
  #    - PYTEST_LOG_DURATIONS (default: 0 - disabled)
  #    - PYTEST_ARGS (default: "" - empty)
  #      Best to export PYTEST_ARGS as array (e.g. `export PYTEST_ARGS=(-m testnet)`. In some cases setting PYTEST_ARGS as string will fail.
  - if [ -z "$PYTEST_TIMEOUT_MINUTES" ]; then echo "Required variable PYTEST_TIMEOUT_MINUTES was not set!"; exit 22; fi
  - if [ $PYTEST_NUMBER_OF_PROCESSES -gt 1 ]; then PROCESSES="-n ${PYTEST_NUMBER_OF_PROCESSES}";  fi
  - if [ ${PYTEST_LOG_DURATIONS:=0} -ge 1 ]; then DURATIONS="--durations 0";  fi
  - |
    echo "Launching pytest
     - timeout (minutes): ${PYTEST_TIMEOUT_MINUTES}
     - processes: ${PYTEST_NUMBER_OF_PROCESSES}
     - log durations: ${PYTEST_LOG_DURATIONS}
     - additional arguments: ${PYTEST_ARGS[@]}"
  - timeout $((($PYTEST_TIMEOUT_MINUTES + 2) * 60)) pytest --timeout=$(($PYTEST_TIMEOUT_MINUTES * 60)) --junitxml="./report.xml" "${PROCESSES}" "${DURATIONS}" "${PYTEST_ARGS[@]}"

.pytest_based:
    variables:
      JUNIT_REPORT: "report.xml" # should be ovverided by derived jobs

    interruptible: true
    image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"

    before_script:
      - python3 -m venv venv/
      - . venv/bin/activate
      - (cd $CI_PROJECT_DIR/tests/hive-local-tools && poetry install)
    artifacts:
      reports:
        junit: $JUNIT_REPORT

      name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
      paths:
        - "**/generated_during_*"
        - "**/generated_by_package_fixtures"
      when: always
      expire_in: 1 week
    rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

.test_tools_based:
  extends: .pytest_based
  variables:
    HIVED_PATH: "$CI_PROJECT_DIR/testnet_node_build/install-root/bin/hived"
    CLI_WALLET_PATH: "$CI_PROJECT_DIR/testnet_node_build/install-root/bin/cli_wallet"
    GET_DEV_KEY_PATH: "$CI_PROJECT_DIR/testnet_node_build/install-root/bin/get_dev_key"
    TEST_TOOLS_NODE_DEFAULT_WAIT_FOR_LIVE_TIMEOUT: "60"
  needs:
    - job: testnet_node_build
      artifacts: true
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

.beem_tests_base:
  stage: test
  extends: .test_tools_based
  script:
    - git clone --depth=1 --single-branch --branch master https://gitlab.syncad.com/hive/beem.git
    - pip3 install junit-xml==${PYTHON_JUNIT_XML_VERSION} python-dateutil==${PYTHON_DATEUTIL_VERSION}
    - cd beem
    - python3 -m pip install --upgrade -r requirements-test.txt
    - python3 setup.py install
    - cd ..
    - mkdir -p build/tests/hive-node-data
    - cd tests/functional/python_tests/beem_tests
    - *run-pytest
  tags:
    - public-runner-docker
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

beem_testnet_tests:
  extends: .beem_tests_base
  needs:
    - job: testnet_node_build
      artifacts: true
  variables:
    PYTEST_TIMEOUT_MINUTES: 18
    PYTEST_ARGS: "-m not mirrornet"
    JUNIT_REPORT: tests/functional/python_tests/beem_tests/report.xml

beem_mirrornet_tests:
  extends: .beem_tests_base
  needs:
    - job: mirrornet_node_build
      artifacts: true
  variables:
    PYTEST_TIMEOUT_MINUTES: 4
    HIVED_PATH: "$CI_PROJECT_DIR/hived-mirrornet-binaries/hived"
    CLI_WALLET_PATH: "$CI_PROJECT_DIR/hived-mirrornet-binaries/cli_wallet"
    GET_DEV_KEY_PATH: "$CI_PROJECT_DIR/hived-mirrornet-binaries/get_dev_key"
    JUNIT_REPORT: tests/functional/python_tests/beem_tests/report.xml

  before_script:
    - !reference [.beem_tests_base, before_script]
    - export PYTEST_ARGS=(-m mirrornet --chain-id ${MIRRORNET_CHAIN_ID} --skeleton-key "${MIRRORNET_SKELETON_KEY}")

cli_wallet_tests:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: tests/functional/python_tests/cli_wallet/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/functional/python_tests/cli_wallet
    - *run-pytest
  tags:
    - public-runner-docker

hived_tests:
  stage: test
  extends: .test_tools_based

  variables:
    JUNIT_REPORT: tests/functional/python_tests/hived/report.xml
    PYTEST_TIMEOUT_MINUTES: 30

  script:
    - cd tests/functional/python_tests/hived
    - *run-pytest
  tags:
    - public-runner-docker

cli_wallet_extended_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 14
    JUNIT_REPORT: tests/functional/python_tests/cli_wallet_extended_tests/report.xml

  script:
    - cd tests/functional/python_tests/cli_wallet_extended_tests
    - *run-pytest
  tags:
    - public-runner-docker

fork_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 20
    JUNIT_REPORT: tests/functional/python_tests/fork_tests/report.xml

  script:
    - cd tests/functional/python_tests/fork_tests
    - *run-pytest
  tags:
    - public-runner-docker
  artifacts:
    expire_in: 2 days


hf26_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 20
    SIGN_TRANSACTION_PATH: "$CI_PROJECT_DIR/testnet_node_build/install-root/bin/sign_transaction"
    JUNIT_REPORT: tests/functional/python_tests/hf26_tests/report.xml

  script:
    - cd tests/functional/python_tests/hf26_tests
    - *run-pytest
  tags:
    - public-runner-docker

live_sync_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 10
    JUNIT_REPORT: tests/functional/python_tests/live_sync_tests/report.xml

  script:
    - cd tests/functional/python_tests/live_sync_tests
    - *run-pytest
  tags:
    - public-runner-docker

broadcast_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 6
    JUNIT_REPORT: tests/functional/python_tests/broadcast_tests/report.xml

  script:
    - cd tests/functional/python_tests/broadcast_tests
    - *run-pytest
  tags:
    - public-runner-docker

test_tools_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 30
    JUNIT_REPORT: tests/hive-local-tools/test-tools/tests/report.xml

  script:
    - cd tests/hive-local-tools/test-tools/tests
    - pip install local-tools/
    - *run-pytest
  tags:
    - public-runner-docker

rc_direct_delegations_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 12
    JUNIT_REPORT: tests/functional/python_tests/direct_rc_delegations_tests/report.xml

  script:
    - cd tests/functional/python_tests/direct_rc_delegations_tests
    - *run-pytest
  tags:
    - public-runner-docker

message_format_testnet_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 45
    SIGN_TRANSACTION_PATH: "$CI_PROJECT_DIR/testnet_node_build/install-root/bin/sign_transaction"
    TEST_TOOLS_VALIDATE_RESPONSE_SCHEMAS: "TRUE"
    NODE_TYPE: "testnet"
    JUNIT_REPORT: tests/api_tests/message_format_tests/report.xml

  script:
    - cd tests/api_tests/message_format_tests
    - export PYTEST_ARGS=(-m "${NODE_TYPE} or (not testnet and not mainnet_5m and not live_mainnet)")
    - *run-pytest
  tags:
    - public-runner-docker

datagen_api_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 25
    SIGN_TRANSACTION_PATH: "$CI_PROJECT_DIR/testnet_node_build/install-root/bin/sign_transaction"
    JUNIT_REPORT: tests/functional/python_tests/datagen_tests/report.xml

  script:
    - cd tests/functional/python_tests/datagen_tests/
    - *run-pytest
  tags:
    - public-runner-docker

patterns_tests:
  stage: test
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  extends: .pytest_based
  variables:
    FF_NETWORK_PER_BUILD: 1
    PYTHONPATH: "$CI_PROJECT_DIR/tests/hive-local-tools/test-tools/package"
    TEST_SUITE: "(condenser_api_patterns and (get_block or get_block_header) ) or block_api_patterns or (not get_transaction_hex and (get_transaction or get_account_history or enum_virtual_ops or get_ops_in_block))"
    HIVED_UID: $HIVED_UID
  needs:
    - job: prepare_hived_data
      artifacts: true

  services:
    - *hived-service

  before_script:
    - curl -I hived-instance:8090 || (echo "error connecting to service hived-instance" && false)
    - !reference [.test_tools_based, before_script]
    - pip3 install tox==${TOX_VERSION}

  script:
    # run pattern tests
    - cd $CI_PROJECT_DIR/tests/api_tests/pattern_tests
    - timeout 33m ./run_tests.sh hived-instance:8090 "$CI_PROJECT_DIR" "${TEST_SUITE}" FALSE

  after_script:
    - rm docker_entrypoint.log -f
    - cp $DATA_CACHE_HIVE/datadir/$CI_JOB_NAME.log $CI_PROJECT_DIR/docker_entrypoint.log

  artifacts:
    reports:
      junit: tests/api_tests/pattern_tests/results.xml
    paths:
    - "$CI_JOB_NAME"
    - "**/from_node.log"
    - "**/ah.log"
    - "**/*.out.json"
    - "$CI_PROJECT_DIR/tests/hive-local-tools/tests-api/hived/workdir_*"
    - docker_entrypoint.log
    when: always
    expire_in: 6 hours
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage

transaction_serialization_testnet_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 15
    JUNIT_REPORT: tests/functional/python_tests/transaction_serialization_tests/report.xml

  script:
    - cd $CI_PROJECT_DIR/tests/functional/python_tests/transaction_serialization_tests
    - export PYTEST_ARGS=(-m testnet)
    - *run-pytest
  tags:
    - public-runner-docker

python_pattern_mainnet_tests:
  stage: test
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  extends: .test_tools_based
  interruptible: true
  variables:
    PYTEST_TIMEOUT_MINUTES: 27
    TEST_TOOLS_NODE_DEFAULT_WAIT_FOR_LIVE_TIMEOUT: "60"
    JUNIT_REPORT: tests/api_tests/python_patterns_tests/report.xml
    BINARY_CACHE_PATH: "hived-binaries"
    HIVED_UID: $HIVED_UID
  needs:
    - job: prepare_hived_image
      artifacts: true
    - job: prepare_hived_data
      artifacts: true

  services:
    - *hived-service

  before_script:
    - curl -I hived-instance:8090 || (echo "error connecting to service hived-instance" && false)
    - !reference [.test_tools_based, before_script]
  script:
    # run pattern tests
    - cd $CI_PROJECT_DIR/tests/api_tests/python_patterns_tests
    - export PYTEST_ARGS=(-m mainnet_5m --http-endpoint hived-instance:8090 --ws-endpoint hived-instance:8091 --wallet-path $CI_PROJECT_DIR/$BINARY_CACHE_PATH/cli_wallet)
    - *run-pytest

  after_script:
    - rm docker_entrypoint.log -f
    - cp $DATA_CACHE_HIVE/datadir/$CI_JOB_NAME.log $CI_PROJECT_DIR/docker_entrypoint.log

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    reports:
      junit: $CI_PROJECT_DIR/tests/api_tests/python_patterns_tests/report.xml
    paths:
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    - docker_entrypoint.log
    when: always
    expire_in: 6 hours
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage

.message_format_tests:
  stage: test
  extends: .test_tools_based
  variables:
    PYTEST_TIMEOUT_MINUTES: 30
    TEST_TOOLS_VALIDATE_RESPONSE_SCHEMAS: "TRUE"
    JUNIT_REPORT: tests/api_tests/message_format_tests/report.xml

  script:
    - cd tests/api_tests/message_format_tests
    - export PYTEST_ARGS=(-m ${NODE_TYPE} --http-endpoint=${NODE_ADDRESS})
    - *run-pytest
  tags:
    - public-runner-docker
    - hived-for-tests
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "false"

message_format_mainnet_5m_tests:
  extends: .message_format_tests
  needs:
    - job: prepare_hived_data
      artifacts: true
  services:
    - *hived-service
  variables:
    NODE_ADDRESS: "hived-instance:8090"
    NODE_TYPE: "mainnet_5m"
    HIVED_UID: $HIVED_UID
  before_script:
    - curl -I hived-instance:8090 || (echo "error connecting to service hived-instance" && false)
    - !reference [.message_format_tests, before_script]
  after_script:
    - rm docker_entrypoint.log -f
    - cp $DATA_CACHE_HIVE/datadir/$CI_JOB_NAME.log $CI_PROJECT_DIR/docker_entrypoint.log
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    reports:
      junit: $CI_PROJECT_DIR/tests/api_tests/message_format_tests/report.xml
    paths:
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    - docker_entrypoint.log
    when: always
    expire_in: 1 week
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage

message_format_live_mainnet_tests:
  extends: .message_format_tests
  variables:
    NODE_ADDRESS: "http://api.fqdn.pl:8092"
    NODE_TYPE: "live_mainnet"
  rules:
    # Run this job, only when environment variable "RUN_MESSAGE_FORMAT_TESTS_ON_LIVE_MAINNET" is set
    - if: $RUN_MESSAGE_FORMAT_TESTS_ON_LIVE_MAINNET == "TRUE"
      when: always

foundation_layer_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 3
    JUNIT_REPORT: tests/functional/python_tests/foundation_layer_tests/report.xml

  script:
    - cd tests/functional/python_tests/foundation_layer_tests
    - *run-pytest
  tags:
    - public-runner-docker

witness_tests:
  stage: test
  extends: .test_tools_based
  needs:
    - job: prepare_hived_data
      artifacts: true
  services:
    - *hived-service
  variables:
    NODE_ADDRESS: "hived-instance:8090"
    PYTEST_TIMEOUT_MINUTES: 5
    JUNIT_REPORT: tests/functional/python_tests/witness_tests/report.xml
    HIVED_UID: $HIVED_UID
  script:
    - curl -I hived-instance:8090 || (echo "error connecting to service hived-instance" && false)
    - cd tests/functional/python_tests/witness_tests
    - export PYTEST_ARGS=(--http-endpoint=${NODE_ADDRESS})
    - *run-pytest
  after_script:
    - rm docker_entrypoint.log -f
    - cp $DATA_CACHE_HIVE/datadir/$CI_JOB_NAME.log $CI_PROJECT_DIR/docker_entrypoint.log
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage

hf28_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 20
    JUNIT_REPORT: tests/functional/python_tests/hf28_tests/report.xml

  script:
    - cd tests/functional/python_tests/hf28_tests
    - *run-pytest
  tags:
    - public-runner-docker
    
functional_api_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 3
    JUNIT_REPORT: tests/functional/python_tests/api_tests/report.xml

  script:
    - cd tests/functional/python_tests/api_tests/
    - *run-pytest
  tags:
    - public-runner-docker

publish_docker_image:
  stage: publish
  extends: .publish_docker_image_template
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh
  tags:
    - public-runner-docker
  rules:
    - if: $RUN_MIRRORNET_PIPELINE == "true"
      when: never
    - !reference [.publish_docker_image_template, rules]

hardfork_schedule_tests:
  stage: test
  extends: .test_tools_based

  variables:
    PYTEST_TIMEOUT_MINUTES: 3
    JUNIT_REPORT: tests/functional/python_tests/hardfork_schedule_tests/report.xml

  script:
    - cd tests/functional/python_tests/hardfork_schedule_tests
    - *run-pytest
  tags:
    - public-runner-docker

block-conversion:
  extends: .block-conversion-job-template
  stage: build
  needs:
    - mirrornet_node_build

mirrornet-replay:
  extends: .replay-template
  stage: replay
  needs:
    - mirrornet_node_build
    - block-conversion

mirrornet-data-cleanup:
  extends: .data-cleanup-template
  stage: cleanup

several_node_restarts_tests:
  extends: .prepare_hived_data_5m
  stage: test
  needs:
    - job: prepare_hived_image
      artifacts: true
  variables:
    BLOCK_LOG_SOURCE_DIR: "$BLOCK_LOG_SOURCE_DIR_5M"
    CONFIG_INI_SOURCE: "$CI_PROJECT_DIR/docker/config_5M.ini"
  script:
    - test -n "$HIVED_IMAGE_NAME"
    - ./tests/integration/test_several_node_restarts.sh $CI_PROJECT_DIR/data_generated_during_hive_replay 1000000 1500000
  artifacts:
    paths:
      - $CI_PROJECT_DIR/data_generated_during_hive_replay/datadir/docker_entrypoint.log
  tags:
    - public-runner-docker

recovery_tests:
  stage: test
  extends: .test_tools_based
  variables:
    PYTEST_TIMEOUT_MINUTES: 10
    JUNIT_REPORT: tests/functional/python_tests/recovery_tests/report.xml
  script:
    - cd tests/functional/python_tests/recovery_tests
    - *run-pytest
  tags:
    - public-runner-docker

operation_tests:
  stage: test
  extends: .test_tools_based
  variables:
    PYTEST_TIMEOUT_MINUTES: 10
    JUNIT_REPORT: tests/functional/python_tests/operation_tests/report.xml
  script:
    - cd tests/functional/python_tests/operation_tests
    - *run-pytest
  tags:
    - public-runner-docker

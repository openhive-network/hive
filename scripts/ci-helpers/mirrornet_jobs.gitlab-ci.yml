variables:
  BLOCK_LOG_SOURCE_DIR: "/cache/blockchain"
  BLOCK_LOG_OUTPUT_DIR: "/cache/block_log_mirrornet"
  MIRRORNET_CHAIN_ID: 42
  MIRRORNET_IMAGE: $CI_REGISTRY_IMAGE/mirrornet:mirrornet-$CI_COMMIT_SHORT_SHA
  MIRRORNET_SKELETON_KEY: "5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n"
  NUMBER_OF_PROCESSES: 8
  SHARED_FILE_SIZE: 24G
  SHARED_FILE_SIZE_FULL_THRESHOLD: 9500
  SHARED_FILE_SCALE_RATE: 1000

include:
  # needed to point TEST_IMAGE_TAG
  - local: '/scripts/ci-helpers/extended_block_log_creation.gitlab-ci.yml'

.mirrornet-job_base:
  stage: deploy
  timeout: 2 weeks
  resource_group: mirrornet-job
  tags:
    - mirrornet-runner

.mirrornet-job:
  extends: .mirrornet-job_base
  image: 
    name: $MIRRORNET_IMAGE
    entrypoint: [""]
  variables:
    GIT_SUBMODULE_STRATEGY: none

.block-conversion-job-template:
  extends: .mirrornet-job
  variables:
    GIT_STRATEGY: none
    NUMBER_OF_BLOCKS: 5000000

  script:
    - |
      set -e
      echo "Converting block log to mirrornet format"
      sudo mkdir -p "$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID/mainnet"
      sudo chown -Rf $(id -u):$(id -g) "$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID"
      ls -lah "$BLOCK_LOG_OUTPUT_DIR"
      MAINNET_BLOCK_LOG_PATH="$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID/mainnet/block_log"
      rm -f "$MAINNET_BLOCK_LOG_PATH"
      rm -f "$MAINNET_BLOCK_LOG_PATH.artifacts"
      ln "$BLOCK_LOG_SOURCE_DIR/block_log" "$MAINNET_BLOCK_LOG_PATH"
      ln "$BLOCK_LOG_SOURCE_DIR/block_log.artifacts" "$MAINNET_BLOCK_LOG_PATH.artifacts"
      ls -lAh "$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID"
      time /home/hived/bin/blockchain_converter \
        --plugin block_log_conversion \
        --input "$MAINNET_BLOCK_LOG_PATH" \
        --output "$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID/block_log" \
        --chain-id $MIRRORNET_CHAIN_ID \
        --private-key "$MIRRORNET_SKELETON_KEY" \
        --use-same-key \
        --stop-block $NUMBER_OF_BLOCKS \
        --jobs $NUMBER_OF_PROCESSES 2>&1 | tee block-conversion.log
      ls -lAh "$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID"
      du -h "$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID"
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - "block-conversion.log"
    when: always
    expire_in: 1 week

generate_mirrornet_config_ini:
  extends: .mirrornet-job_base
  image: "$CI_REGISTRY_IMAGE/ci-base-image$TEST_IMAGE_TAG"
  variables:
    OUTPUT_FILE_DIR: "hive-home"
  when: manual
  needs: []
  script:
    - |
      mkdir -vp "${OUTPUT_FILE_DIR}"
      scripts/ci-helpers/generate-file-from-template.py \
        --input-file contrib/config_mirrornet.ini.template \
        --output-file "${OUTPUT_FILE_DIR}/config.ini"

  artifacts:
    paths:
      - "${OUTPUT_FILE_DIR}"

.replay-template:
  extends: .mirrornet-job

  variables:
    NUMBER_OF_BLOCKS: 5000000

  script:
    - |
      mkdir -vp "hive-home/blockchain"
      ln -s $BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID/block_log hive-home/blockchain/block_log
      ln -s $BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID/block_log.artifacts hive-home/blockchain/block_log.artifacts
      cd hive-home
      ls -lAhR
      /home/hived/bin/hived \
        -d "$CI_PROJECT_DIR/hive-home" \
        --chain-id "$MIRRORNET_CHAIN_ID" \
        --skeleton-key "$MIRRORNET_SKELETON_KEY" \
        --force-replay \
        --stop-at-block "$NUMBER_OF_BLOCKS" \
        --validate-during-replay \
        --exit-before-sync 2>&1 | tee hived-replay.log
      /home/hived/bin/hived \
        -d "$CI_PROJECT_DIR/hive-home" \
        --chain-id "$MIRRORNET_CHAIN_ID" \
        --skeleton-key "$MIRRORNET_SKELETON_KEY" \
        --snapshot-root-dir="$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID" \
        --dump-snapshot=snapshot \
        --exit-before-sync 2>&1 | tee hived-snapshot.log
      ls -lAh "$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID"
      du -h "$BLOCK_LOG_OUTPUT_DIR/$CI_PIPELINE_ID"
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - "hive-home/hived-*.log"
      - "hive-home/config.ini"
    when: always
    expire_in: 6 months

.data-cleanup-template:
  extends: .mirrornet-job
  image: busybox:latest
  needs: [] # Allow to run cleanup even if the previous jobs failed
  variables:
    GIT_STRATEGY: none

  script:
    - rm -Rf $BLOCK_LOG_OUTPUT_DIR/*
  when: manual
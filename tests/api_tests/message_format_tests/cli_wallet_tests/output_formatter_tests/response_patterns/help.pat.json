["                          variant_object about()", "               wallet_signed_transaction cancel_order(const string & owner, uint32_t orderid, bool broadcast)", "               wallet_signed_transaction cancel_transfer_from_savings(const string & from, uint32_t request_id, bool broadcast)", "               wallet_signed_transaction change_recovery_account(const string & owner, const string & new_recovery_account, bool broadcast)", "               wallet_signed_transaction claim_account_creation(const string & creator, const wallet_serializer_wrapper<hive::protocol::asset> & fee, bool broadcast)", "               wallet_signed_transaction claim_account_creation_nonblocking(const string & creator, const wallet_serializer_wrapper<hive::protocol::asset> & fee, bool broadcast)", "               wallet_signed_transaction claim_reward_balance(const string & account, const wallet_serializer_wrapper<hive::protocol::asset> & reward_hive, const wallet_serializer_wrapper<hive::protocol::asset> & reward_hbd, const wallet_serializer_wrapper<hive::protocol::asset> & reward_vests, bool broadcast)", "               wallet_signed_transaction convert_hbd(const string & from, const wallet_serializer_wrapper<hive::protocol::asset> & amount, bool broadcast)", "               wallet_signed_transaction convert_hive_with_collateral(const string & from, const wallet_serializer_wrapper<hive::protocol::asset> & collateral_amount, bool broadcast)", "               wallet_signed_transaction create_account(const string & creator, const string & new_account_name, const string & json_meta, bool broadcast)", "               wallet_signed_transaction create_account_delegated(const string & creator, const wallet_serializer_wrapper<hive::protocol::asset> & hive_fee, const wallet_serializer_wrapper<hive::protocol::asset> & delegated_vests, const string & new_account_name, const string & json_meta, bool broadcast)", "               wallet_signed_transaction create_account_with_keys(const string & creator, const string & newname, const string & json_meta, public_key_type owner, public_key_type active, public_key_type posting, public_key_type memo, bool broadcast)", "               wallet_signed_transaction create_account_with_keys_delegated(const string & creator, const wallet_serializer_wrapper<hive::protocol::asset> & hive_fee, const wallet_serializer_wrapper<hive::protocol::asset> & delegated_vests, const string & newname, const string & json_meta, public_key_type owner, public_key_type active, public_key_type posting, public_key_type memo, bool broadcast)", "               wallet_signed_transaction create_funded_account_with_keys(const string & creator, const string & new_account_name, const wallet_serializer_wrapper<hive::protocol::asset> & initial_amount, const string & memo, const string & json_meta, public_key_type owner_key, public_key_type active_key, public_key_type posting_key, public_key_type memo_key, bool broadcast)", "               wallet_signed_transaction create_order(const string & owner, uint32_t order_id, const wallet_serializer_wrapper<hive::protocol::asset> & amount_to_sell, const wallet_serializer_wrapper<hive::protocol::asset> & min_to_receive, bool fill_or_kill, uint32_t expiration, bool broadcast)", "               wallet_signed_transaction create_proposal(const account_name_type & creator, const account_name_type & receiver, time_point_sec start_date, time_point_sec end_date, const wallet_serializer_wrapper<hive::protocol::asset> & daily_pay, string subject, string permlink, bool broadcast)", "               wallet_signed_transaction decline_voting_rights(const string & account, bool decline, bool broadcast)", "                                  string decrypt_memo(string memo)", "               wallet_signed_transaction delegate_rc(const account_name_type & from, const flat_set<account_name_type> & delegatees, int64_t max_rc, bool broadcast)", "               wallet_signed_transaction delegate_vesting_shares(const string & delegator, const string & delegatee, const wallet_serializer_wrapper<hive::protocol::asset> & vesting_shares, bool broadcast)", "               wallet_signed_transaction delegate_vesting_shares_and_transfer(const string & delegator, const string & delegatee, const wallet_serializer_wrapper<hive::protocol::asset> & vesting_shares, const wallet_serializer_wrapper<hive::protocol::asset> & transfer_amount, optional<string> transfer_memo, bool broadcast)", "               wallet_signed_transaction delegate_vesting_shares_and_transfer_nonblocking(const string & delegator, const string & delegatee, const wallet_serializer_wrapper<hive::protocol::asset> & vesting_shares, const wallet_serializer_wrapper<hive::protocol::asset> & transfer_amount, optional<string> transfer_memo, bool broadcast)", "               wallet_signed_transaction delegate_vesting_shares_nonblocking(const string & delegator, const string & delegatee, const wallet_serializer_wrapper<hive::protocol::asset> & vesting_shares, bool broadcast)", "               wallet_signed_transaction escrow_approve(const string & from, const string & to, const string & agent, const string & who, uint32_t escrow_id, bool approve, bool broadcast)", "               wallet_signed_transaction escrow_dispute(const string & from, const string & to, const string & agent, const string & who, uint32_t escrow_id, bool broadcast)", "               wallet_signed_transaction escrow_release(const string & from, const string & to, const string & agent, const string & who, const string & receiver, uint32_t escrow_id, const wallet_serializer_wrapper<hive::protocol::asset> & hbd_amount, const wallet_serializer_wrapper<hive::protocol::asset> & hive_amount, bool broadcast)", "               wallet_signed_transaction escrow_transfer(const string & from, const string & to, const string & agent, uint32_t escrow_id, const wallet_serializer_wrapper<hive::protocol::asset> & hbd_amount, const wallet_serializer_wrapper<hive::protocol::asset> & hive_amount, const wallet_serializer_wrapper<hive::protocol::asset> & fee, const time_point_sec & ratification_deadline, const time_point_sec & escrow_expiration, const string & json_meta, bool broadcast)", "wallet_serializer_wrapper<hive::protocol::asset> estimate_hive_collateral(const wallet_serializer_wrapper<hive::protocol::asset> & hbd_amount_to_get)", "                                    void exit()", "wallet_serializer_wrapper<vector<database_api::api_proposal_object>> find_proposals(fc::variant proposal_ids)", "wallet_serializer_wrapper<vector<rc::rc_account_api_object>> find_rc_accounts(fc::variant accounts)", "wallet_serializer_wrapper<vector<database_api::api_recurrent_transfer_object>> find_recurrent_transfers(fc::variant from)", "               wallet_signed_transaction follow(const string & follower, const string & following, set<string> what, bool broadcast)", "wallet_serializer_wrapper<database_api::api_account_object> get_account(const string & account_name)", "                                 variant get_account_history(const string & account, uint32_t from, uint32_t limit)", "wallet_serializer_wrapper<vector<database_api::api_account_object>> get_accounts(fc::variant account_names)", "             get_active_witnesses_return get_active_witnesses(bool include_future)", "optional<wallet_serializer_wrapper<block_api::api_signed_block_object>> get_block(uint32_t num)", "wallet_serializer_wrapper<vector<database_api::api_collateralized_convert_request_object>> get_collateralized_conversion_requests(fc::variant owner)", "wallet_serializer_wrapper<vector<database_api::api_convert_request_object>> get_conversion_requests(fc::variant owner)", "                                  string get_encrypted_memo(const string & from, const string & to, const string & memo)", "wallet_serializer_wrapper<database_api::api_feed_history_object> get_feed_history()", "                                 variant get_open_orders(const string & accountname)", "wallet_serializer_wrapper<vector<account_history::api_operation_object>> get_ops_in_block(uint32_t block_num, bool only_virtual)", "                                 variant get_order_book(uint32_t limit)", "vector<database_api::api_owner_authority_history_object> get_owner_history(fc::variant account)", "                                  string get_private_key(public_key_type pubkey)", "           pair<public_key_type, string> get_private_key_from_password(const string & account, const string & role, const string & password)", "    wallet_serializer_wrapper<operation> get_prototype_operation(const string & operation_type)", "wallet_serializer_wrapper<hive::plugins::account_history::annotated_signed_transaction> get_transaction(fc::variant trx_id)", "                                 variant get_withdraw_routes(const string & account, database_api::withdraw_route_type type)", "optional<wallet_serializer_wrapper<database_api::api_witness_object>> get_witness(const string & owner_account)", "                                 variant gethelp(const string & method)", "                                 variant help()", "                                    void import_key(const string & wif_key)", "                                    void import_keys(const vector<string> & wif_keys)", "                                 variant info()", "                                    bool is_locked()", "                                    bool is_new()", "               vector<account_name_type> list_accounts(const string & lowerbound, uint32_t limit)", "            map<public_key_type, string> list_keys()", "                                 variant list_my_accounts()", "wallet_serializer_wrapper<vector<database_api::api_proposal_vote_object>> list_proposal_votes(fc::variant start, uint32_t limit, database_api::sort_order_type order_by, database_api::order_direction_type order_type, database_api::proposal_status status)", "wallet_serializer_wrapper<vector<database_api::api_proposal_object>> list_proposals(fc::variant start, uint32_t limit, database_api::sort_order_type order_by, database_api::order_direction_type order_type, database_api::proposal_status status)", "wallet_serializer_wrapper<vector<rc::rc_account_api_object>> list_rc_accounts(const string & account, uint32_t limit)", "wallet_serializer_wrapper<vector<rc::rc_direct_delegation_api_object>> list_rc_direct_delegations(fc::variant start, uint32_t limit)", "               vector<account_name_type> list_witnesses(const string & lowerbound, uint32_t limit)", "                                    bool load_wallet_file(string wallet_filename)", "                                    void lock()", "                                  string normalize_brain_key(string s)", "               wallet_signed_transaction post_comment(const string & author, const string & permlink, const string & parent_author, const string & parent_permlink, const string & title, const string & body, const string & json, bool broadcast)", "               wallet_signed_transaction publish_feed(const string & witness, const wallet_serializer_wrapper<price> & exchange_rate, bool broadcast)", "               wallet_signed_transaction recover_account(const string & account_to_recover, authority recent_authority, authority new_authority, bool broadcast)", "               wallet_signed_transaction recurrent_transfer(const account_name_type & from, const account_name_type & to, const wallet_serializer_wrapper<hive::protocol::asset> & amount, const string & memo, uint16_t recurrence, uint16_t executions, bool broadcast)", "               wallet_signed_transaction recurrent_transfer_with_id(const account_name_type & from, const account_name_type & to, const wallet_serializer_wrapper<hive::protocol::asset> & amount, const string & memo, uint16_t recurrence, uint16_t executions, uint8_t pair_id, bool broadcast)", "               wallet_signed_transaction remove_proposal(const account_name_type & deleter, const flat_set<int64_t> & ids, bool broadcast)", "               wallet_signed_transaction request_account_recovery(const string & recovery_account, const string & account_to_recover, authority new_authority, bool broadcast)", "                                    void save_wallet_file(string wallet_filename)", "                                  string serialize_transaction(const wallet_serializer_wrapper<signed_transaction> & tx)", "                                    void set_password(const string & password)", "                                    void set_transaction_expiration(uint32_t seconds)", "               wallet_signed_transaction set_voting_proxy(const string & account_to_modify, const string & proxy, bool broadcast)", "               wallet_signed_transaction set_withdraw_vesting_route(const string & from, const string & to, uint16_t percent, bool auto_vest, bool broadcast)", "               wallet_signed_transaction sign_transaction(const wallet_serializer_wrapper<transaction> & tx, bool broadcast)", "                          brain_key_info suggest_brain_key()", "               wallet_signed_transaction transfer(const string & from, const string & to, const wallet_serializer_wrapper<hive::protocol::asset> & amount, const string & memo, bool broadcast)", "               wallet_signed_transaction transfer_from_savings(const string & from, uint32_t request_id, const string & to, const wallet_serializer_wrapper<hive::protocol::asset> & amount, const string & memo, bool broadcast)", "               wallet_signed_transaction transfer_nonblocking(const string & from, const string & to, const wallet_serializer_wrapper<hive::protocol::asset> & amount, const string & memo, bool broadcast)", "               wallet_signed_transaction transfer_to_savings(const string & from, const string & to, const wallet_serializer_wrapper<hive::protocol::asset> & amount, const string & memo, bool broadcast)", "               wallet_signed_transaction transfer_to_vesting(const string & from, const string & to, const wallet_serializer_wrapper<hive::protocol::asset> & amount, bool broadcast)", "               wallet_signed_transaction transfer_to_vesting_nonblocking(const string & from, const string & to, const wallet_serializer_wrapper<hive::protocol::asset> & amount, bool broadcast)", "                                    void unlock(const string & password)", "               wallet_signed_transaction update_account(const string & accountname, const string & json_meta, public_key_type owner, public_key_type active, public_key_type posting, public_key_type memo, bool broadcast)", "               wallet_signed_transaction update_account_auth_account(const string & account_name, authority_type type, const string & auth_account, weight_type weight, bool broadcast)", "               wallet_signed_transaction update_account_auth_key(const string & account_name, authority_type type, public_key_type key, weight_type weight, bool broadcast)", "               wallet_signed_transaction update_account_auth_threshold(const string & account_name, authority_type type, uint32_t threshold, bool broadcast)", "               wallet_signed_transaction update_account_memo_key(const string & account_name, public_key_type key, bool broadcast)", "               wallet_signed_transaction update_account_meta(const string & account_name, const string & json_meta, bool broadcast)", "               wallet_signed_transaction update_proposal(int64_t proposal_id, const account_name_type & creator, const wallet_serializer_wrapper<hive::protocol::asset> & daily_pay, string subject, string permlink, optional<time_point_sec> end_date, bool broadcast)", "               wallet_signed_transaction update_proposal_votes(const account_name_type & voter, const flat_set<int64_t> & proposals, bool approve, bool broadcast)", "               wallet_signed_transaction update_witness(const string & witness_name, const string & url, public_key_type block_signing_key, const wallet_serializer_wrapper<legacy_chain_properties> & props, bool broadcast)", "                                    void use_authority(authority_type type, const account_name_type & account_name)", "                                    void use_automatic_authority()", "               wallet_signed_transaction vote(const string & voter, const string & author, const string & permlink, int16_t weight, bool broadcast)", "               wallet_signed_transaction vote_for_witness(const string & account_to_vote_with, const string & witness_to_vote_for, bool approve, bool broadcast)", "               wallet_signed_transaction withdraw_vesting(const string & from, const wallet_serializer_wrapper<hive::protocol::asset> & vesting_shares, bool broadcast)"]
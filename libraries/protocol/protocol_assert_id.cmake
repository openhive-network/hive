macro(protocol_assert_id
  sources
  assertion_id_generator_output_path
  assertion_id_verifier_header_path
  assertion_id_wax_inline_path
  assertion_id_verifier_output_path)

  message("Beginning verification of assertion's given id in protocol namespace")

  set(protocol_assert_expressions)
  list(APPEND protocol_assert_expressions "#include <fc/exception/exception.hpp>\n")
  list(APPEND protocol_assert_expressions "#include <fstream>\n\n")
  list(APPEND protocol_assert_expressions "#define HASH_EXPR( EXPR ) fc::exception::hash_expr( #EXPR )\n\n")
  list(APPEND protocol_assert_expressions "int main( int argc, char** argv ){\n")
  list(APPEND protocol_assert_expressions "  uint64_t h = 0\;\n")
  list(APPEND protocol_assert_expressions "  std::fstream fsv, fsw\;\n")
  list(APPEND protocol_assert_expressions "  fsv.open(\"${assertion_id_verifier_header_path}\", std::ios::out | std::ios::trunc)\;\n")
  list(APPEND protocol_assert_expressions "  fsv << \"#include <cstdint>\" << std::endl\;\n")
  list(APPEND protocol_assert_expressions "  fsw.open(\"${assertion_id_wax_inline_path}\", std::ios::out | std::ios::trunc)\;\n")
  
  foreach(file ${sources})
    #message("file: ${file}")
    file(REAL_PATH ${file} real_path)
    message(${real_path})
    file(READ ${real_path} file_contents)
    list(FILTER file_contents INCLUDE REGEX "FC_ASSERT[ \r\n]*\\(" )
    if(NOT "${file_contents}" STREQUAL "")
      get_filename_component(file "${file}" NAME)
      list(APPEND protocol_assert_expressions "  fsv << \"//${file}\" << std::endl\;\n")
      foreach(line ${file_contents})
        string(FIND ${line} "FC_ASSERT" start)
        string(FIND ${line} ")" stop REVERSE)
        math(EXPR length "${stop} - ${start} +1")
        string(SUBSTRING ${line} ${start} ${length} assertion)
        #message(">>${assertion}<<")

        # Extract substring of assertion expression
        string(FIND ${assertion} "(" current_pos)
        string(FIND ${assertion} ")" stop REVERSE)
        math(EXPR current_pos "${current_pos} +1")
        math(EXPR length "${stop} - ${current_pos}")
        string(SUBSTRING ${assertion} ${current_pos} ${length} assert_expr)
        #message(">>${assert_expr}<<")

        # Trim assertion message (& its params) if present
        string(FIND ${assert_expr} "," comma_pos)
        string(FIND ${assert_expr} "(" current_pos)
        string(LENGTH ${assert_expr} assert_expr_length)
        while(${comma_pos} GREATER -1 AND ${current_pos} GREATER -1 AND ${comma_pos} GREATER ${current_pos})
          # Scroll to closing parenthesis
          #message("${assert_expr}")
          #message("Looking for parenthesis closing the one at ${current_pos}, comma is ${comma_pos}")
          math(EXPR open_count "1")
          while(${open_count} GREATER 0 AND ${current_pos} LESS ${assert_expr_length})
            math(EXPR current_pos "${current_pos} +1")
            string(SUBSTRING ${assert_expr} ${current_pos} 1 another_byte)
            if("${another_byte}" STREQUAL ")")
              math(EXPR open_count "${open_count} -1")
            elseif("${another_byte}" STREQUAL ")")
              math(EXPR open_count "${open_count} +1")
            endif()
          endwhile()
          if(${current_pos} EQUAL ${assert_expr_length})
            break()
          endif()
          string(SUBSTRING ${assert_expr} ${current_pos} -1 expr_remainder)
          #message("expr_remainder is ${expr_remainder}")
          if(${comma_pos} LESS ${current_pos})
            # Ignore comma inside parentheses. Look for another comma & parenthesis.
            string(FIND ${expr_remainder} "," comma_pos)
            string(FIND ${expr_remainder} "(" new_paren_pos)
            if(${comma_pos} GREATER -1)
              math(EXPR comma_pos "${comma_pos} +${current_pos}")
              #message("found another comma at ${comma_pos}, current_pos is ${current_pos}")
            endif()
            if(${new_paren_pos} GREATER -1)
              math(EXPR current_pos "${current_pos} +${new_paren_pos}")
              #message("found another parenthesis at ${current_pos}, comma_pos is ${comma_pos}")
            else()
              set(current_pos ${new_paren_pos})
            endif()
          else()
            # There may be another parentheses containing the comma.
            string(FIND ${expr_remainder} "(" new_paren_pos)
            if(${new_paren_pos} GREATER -1)
              math(EXPR current_pos "${current_pos} +${new_paren_pos}")
            endif()          
          endif()
        endwhile()
        if(${comma_pos} GREATER -1)
          string(SUBSTRING ${assert_expr} 0 ${comma_pos} assert_expr)
          #message("TRIMMED!>>${assert_expr}<<")
        endif()
        
        string(STRIP ${assert_expr} trimmed_expr)
        string(REGEX REPLACE "//|/\\*|\\*/|\\\\\n|\"" "**" trimmed_for_string ${trimmed_expr})
        string(REGEX REPLACE "[\r\n]+" " " trimmed_for_string ${trimmed_for_string})
        string(REGEX REPLACE "\\\\0" "" trimmed_for_string ${trimmed_for_string})
        #message(">>${trimmed_expr}<<")
        list(APPEND protocol_assert_expressions "  h = HASH_EXPR( ${trimmed_expr} )\;\n")
        list(APPEND protocol_assert_expressions "  fsv << \"uint64_t assertion_\" << h << \" = \" << h << \"ull\; /*${file}*/ /*${trimmed_for_string}*/ \" << std::endl\;\n")
        list(APPEND protocol_assert_expressions "  fsw << \"container.insert( std::make_pair( \" << h << \"ull, \\\"protocol\\\") )\;\" << std::endl\;\n")
      endforeach()
    #message(">> ${file_contents} <<")
    endif()
  endforeach()

  list(APPEND protocol_assert_expressions "  fsv.close()\;\n")
  list(APPEND protocol_assert_expressions "  fsw.close()\;\n")
  list(APPEND protocol_assert_expressions "  return 0\;\n")
  list(APPEND protocol_assert_expressions "}\n")

message("Creating file ${assertion_id_generator_output_path}_tmp")
set(temp_generator "${assertion_id_generator_output_path}_tmp")
file(WRITE ${temp_generator} ${protocol_assert_expressions} )
file(COPY_FILE ${temp_generator} ${assertion_id_generator_output_path} ONLY_IF_DIFFERENT)

set(protocol_assert_id_verifier)
list(APPEND protocol_assert_id_verifier "#include \"${assertion_id_verifier_header_path}\"\n")
list(APPEND protocol_assert_id_verifier "int main( int argc, char** argv ){\n")
list(APPEND protocol_assert_id_verifier "  return 0\;\n")
list(APPEND protocol_assert_id_verifier "}\n")
set(temp_verifier "${assertion_id_verifier_output_path}_tmp")
file(WRITE ${temp_verifier} ${protocol_assert_id_verifier} )
file(COPY_FILE ${temp_verifier} ${assertion_id_verifier_output_path} ONLY_IF_DIFFERENT)

endmacro()
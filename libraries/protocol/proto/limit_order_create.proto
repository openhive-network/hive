syntax = "proto2";

import "asset.proto";

package hive.protocol.buffers;

/* This operation creates a limit order and matches it against existing open orders.
 * It allows to sell Hive and buy HBD or sell HBD and buy Hive.
 * It is a way for a user to declare they want to sell {amount_to_sell} Hive/HBD for at least {min_to_receive} HBD/Hive.
 * The user may be a taker (if a user creates an order and the order matches some order(s))
 * or a maker (if a user creates an order and the order doesnâ€™t match and the order is waiting for a match on the market).
 * If there is a partial match, a user may be a taker and maker for the same order. 
 * If a taker creates an order for all orders on the market the order(s) that are the best deal for the taker are matched.
 * If there are two orders with the same price, the older one is matched.
 * The operation is used by the markets see: https://wallet.hive.blog/market
 *
 * @param {string} owner
 * @param {number} orderid - an ID assigned by owner, must be unique.
 * @param {asset} amount_to_sell
 * @param {asset} min_to_receive
 * @param {bool} fill_or_kill - If fill_or_kill = true, then the operation is executed immediately or it fails
 *                              (the operation is not added to the block). 
 *                              If fill_or_kill = false, then the order is valid till 'expiration'.
 * @param {string} expiration
 */
message limit_order_create {
  required string owner = 1;
  required uint32 orderid = 2;
  required asset  amount_to_sell = 3 [json_name = "amount_to_sell"];
  required asset  min_to_receive = 4 [json_name = "min_to_receive"];
  required bool   fill_or_kill = 5 [json_name = "fill_or_kill"];
  required string expiration = 6;
}

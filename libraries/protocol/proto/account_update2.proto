syntax = "proto2";

import "authority.proto";
import "future_extensions.proto";

package hive.protocol.buffers;

/* There are two operations that allow updating an account data: account_update_operation and account_update2_operation.
 * Operations account_update_operation and account_update2_operation share a limit of allowed updates
 * of the owner authority  - two executions per 60 minutes (HIVE_OWNER_UPDATE_LIMIT) - meaning each of them
 * can be executed twice or both can be executed once during that time period. 
 * After 30 days (HIVE_OWNER_AUTH_RECOVERY_PERIOD) using the account recovery process to change the owner authority is no longer possible.
 * The operation allows to update authority, json_metadata and the posting_json_metadata.
 * Depending on what the user wants to change, a different authority has to be used.
 * Each authority (owner, active, posting, memo_key) consists of:
 * - weight_threshold
 * - key or account name with its weight
 * The authority may have more than one key and more than one assigned account name.
 *
 * @example Example 1:
 * The posting authority:
 * weight_threshold = 1
 * 'first_key', weight = 1
 * 'second_key', weight = 1
 * 'account_name_1', weight = 1
 * The above settings mean that a user with 'first_key', a user with 'second_key' or a user 'account_name_1'
 * may post on behalf of this account.
 *
 * @example Example 2:
 * The posting authority:
 * weight_threshold = 2
 * 'first_key', weight = 1
 * 'second_key', weight = 1
 * 'account_name_1', weight = 1
 * The above settings mean that at least two signatures are needed to post on behalf of this account.
 *
 * @param {string} account - Account name, it cannot be updated.
 * @param {authority} owner - Optional. In order to update the {owner}, the owner authority is required.
 *                            It may be changed 2 times per hour.
 *                            If a user provides a new authority, the old one will be deleted.
 * @param {authority} active - Optional. In order to update the {active}, the active authority is required.
 *                             If a user provides a new authority, the old one will be deleted.
 * @param {authority} posting - Optional. In order to update the {posting}, the active authority is required.
 *                              If a user provides a new authority, the old one will be deleted.
 * @param {string} memo_key - Optional. In order to update the {memo_key}, the active authority is required.
 *                            If a user provides a new key, the old one will be deleted.
 * @param {string} json_metadata - json_string; In order to update the {json_metadata}, the active authority is required.
 * @param {string} posting_json_metadata - json_string; In order to update the { posting_json_metadata },
 *                                         the posting authority is required.
 * @param {future_extensions} extensions
 */
message account_update2 {
  required string            account = 1;
  optional authority         owner = 2;
  optional authority         active = 3;
  optional authority         posting = 4;
  optional string            memo_key = 5 [json_name = "memo_key"];
  required string            json_metadata = 6 [json_name = "json_metadata"];
  required string            posting_json_metadata = 7 [json_name = "posting_json_metadata"];
  repeated future_extensions extensions = 8;
}

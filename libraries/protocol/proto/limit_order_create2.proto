syntax = "proto2";

import "asset.proto";
import "price.proto";

package hive.protocol.buffers;

/* This operation creates a limit order and matches it against existing open orders.
 * It is similar to limit_order_create except it serializes the price rather than calculating it from other fields.
 * It allows to sell Hive and buy HBD or sell HBD and buy Hive.
 * It is a way for a user to declare they wants to sell {amount_to_sell} Hive/HBD for at least {exchange_rate}  per HBD/Hive.
 *
 * Description https://gitlab.syncad.com/hive/hive/-/blob/develop/doc/devs/operations/21_limit_order_create2.md?ref_type=heads
 */
message limit_order_create2 {
  // @param {string} owner
  required string owner = 1;

  // @param {number} orderid - an ID assigned by owner, must be unique.
  required uint32 orderid = 2;

  // @param {asset} amount_to_sell
  required asset  amount_to_sell = 3 [json_name = "amount_to_sell"];

  // @param {bool} fill_or_kill - If fill_or_kill = true, then the operation is executed immediately
  //                              or it fails (the operation is not added to the block). 
  //                              If fill_or_kill = false, then the order is valid till {expiration}.
  required bool   fill_or_kill = 4 [json_name = "fill_or_kill"];

  // @param {price} exchange_rate
  required price  exchange_rate = 5 [json_name = "exchange_rate"];

  // @param {string} expiration
  required string expiration = 6;
}
